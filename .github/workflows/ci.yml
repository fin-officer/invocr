name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: invocr_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          tesseract-ocr \
          tesseract-ocr-pol \
          tesseract-ocr-deu \
          tesseract-ocr-fra \
          tesseract-ocr-spa \
          tesseract-ocr-ita \
          poppler-utils \
          libpango-1.0-0 \
          libharfbuzz0b \
          libpangoft2-1.0-0 \
          libffi-dev \
          python3-dev \
          build-essential

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Poetry installation
      uses: actions/cache@v3
      with:
        path: ~/.local/share/pypoetry
        key: poetry-${{ env.POETRY_VERSION }}-${{ runner.os }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-ansi

    - name: Lint with flake8
      run: |
        poetry run flake8 invocr/ --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 invocr/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Type check with mypy
      run: poetry run mypy invocr/ --ignore-missing-imports

    - name: Format check with black
      run: poetry run black --check invocr/ tests/

    - name: Import sort check with isort
      run: poetry run isort --check-only invocr/ tests/

    - name: Security check with bandit
      run: poetry run bandit -r invocr/ -f json -o bandit-report.json || true

    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report
        path: bandit-report.json

    - name: Test with pytest
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/invocr_test
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: testing
      run: |
        poetry run pytest \
          --cov=invocr \
          --cov-report=xml \
          --cov-report=html \
          --junitxml=pytest-report.xml \
          -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: true

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          pytest-report.xml
          htmlcov/

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: fin-officer/invocr
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'push'

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-docker.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      env:
        KUBECONFIG: ${{ secrets.STAGING_KUBECONFIG }}
        IMAGE_TAG: ${{ needs.build-docker.outputs.image-tag }}
      run: |
        echo "$KUBECONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Update image in deployment
        kubectl set image deployment/invocr-api invocr-api=$IMAGE_TAG -n invocr-staging
        kubectl rollout status deployment/invocr-api -n invocr-staging --timeout=300s

    - name: Run integration tests
      env:
        STAGING_URL: ${{ secrets.STAGING_URL }}
      run: |
        poetry install --only main
        poetry run pytest tests/integration/ --base-url=$STAGING_URL

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-docker, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      env:
        KUBECONFIG: ${{ secrets.PRODUCTION_KUBECONFIG }}
        IMAGE_TAG: ${{ needs.build-docker.outputs.image-tag }}
      run: |
        echo "$KUBECONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Blue-green deployment
        kubectl set image deployment/invocr-api invocr-api=$IMAGE_TAG -n invocr-production
        kubectl rollout status deployment/invocr-api -n invocr-production --timeout=600s

    - name: Health check
      env:
        PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
      run: |
        curl -f $PRODUCTION_URL/health || exit 1

    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}


